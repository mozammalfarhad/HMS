using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using ComponentFactory.Krypton.Toolkit;
using HMS.App_Code.BLL;
using HMS.Forms.BaseForms;
using System.Diagnostics;

namespace HMS.Report
{
    public partial class TestResultEntry : BaseDataGrid
    {
        DataTable dt;
        private int _id;
        public TestResultEntry()
        {
            InitializeComponent();
        }
        public TestResultEntry(int ScheduleID)
        {
            InitializeComponent();
            dt = new bllTestWithSchedule().GetPatientServiceBySchedId(ScheduleID);
            //   dgvTestWithSchedule.DataSource = dt;
  imgDelete = new Bitmap(Application.StartupPath + @"\Images\" + "Delete.gif");
             imgEdit = new Bitmap(Application.StartupPath + @"\Images\" + "update.jpg");
            imgCreate = new Bitmap(Application.StartupPath + @"\Images\" + "Create.gif");
            LoadGridData(dt);
            LoadPatient();
            _id = ScheduleID;
        }


        private void LoadPatient()
        {
            DataTable ServiceType = new bllServiceType().GetAll();
            DataRow dr = ServiceType.NewRow();
            dr["TypeId"] = "0";
            dr["TypeName"] = "Select Service Type";
            ServiceType.Rows.InsertAt(dr, 0);
            ComServiceType.DataSource = ServiceType;
            ComServiceType.DisplayMember = "TypeName";
            ComServiceType.ValueMember = "TypeId";
            ComServiceType.SelectedIndex = 0;
            //PatientCode

        }

        private void LoadGridData(DataTable dtl)
        {
            Bitmap imgEdit;
            Bitmap imgDelete;


            dgvMain.Rows.Clear();
            foreach (DataRow dr in dtl.Rows)
            {
                int RowNum = dgvMain.Rows.Add(
                    new object[] {
                        dr["SheduleId"],
                        dr["TestId"],     
                        dr["PatientId"],
                         dr["ServiceId"],
                        dr["ServiceName"],   
                        dr["Rate"],
                        dr["Status"]

                    });
                string status = dr["Status"].ToString();
                if (status != "Pending")
                {
                    dgvMain.Rows[RowNum].Cells[7].ToolTipText = "Edit";
                    imgEdit = new Bitmap(Application.StartupPath + @"\Images\" + "Edit.gif");
                }
                else
                {
                    dgvMain.Rows[RowNum].Cells[7].ToolTipText = "Entry";
                    imgEdit = new Bitmap(Application.StartupPath + @"\Images\" + "Create.gif");
                }
                imgDelete = new Bitmap(Application.StartupPath + @"\Images\" + "Delete.gif");

                dgvMain.Rows[RowNum].Cells[8].ToolTipText = "Delete";
                dgvMain.Rows[RowNum].Cells[7].Value = imgEdit;
                dgvMain.Rows[RowNum].Cells[8].Value = imgDelete;
                dgvMain.Rows[RowNum].Tag = dr["TestId"].ToString();
            }
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void dgvMain_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            int ScheduleID = Convert.ToInt32(dgvMain.SelectedRows[0].Cells[0].Value);
            int TestID = Convert.ToInt32(dgvMain.SelectedRows[0].Cells[1].Value);
            int PatientID = Convert.ToInt32(dgvMain.SelectedRows[0].Cells[2].Value);
            int ServiceID = Convert.ToInt32(dgvMain.SelectedRows[0].Cells[3].Value);
            DataGridViewCell dvcell = new DataGridViewButtonCell();
            dvcell.ToolTipText = dgvMain.Rows[e.RowIndex].Cells[e.ColumnIndex].ToolTipText.ToString();
            if (dvcell.ToolTipText.ToString() == "Delete")
            {

                if (KryptonMessageBox.Show("Sure to remove?", "Test delete.", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    return;
                }
                int Success = new bllTestWithSchedule().Delete(ScheduleID, TestID);
                if (Success > 0)
                {
                    KryptonMessageBox.Show("Test removed successfully!", "Patient Test.", MessageBoxButtons.OK,
                        MessageBoxIcon.Information);
                }
                else
                {
                    KryptonMessageBox.Show("Test removed failed!", "Patient Test.", MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            else if (dvcell.ToolTipText.ToString() == "Entry")
            {

                TestResultDetailEntry frm = new TestResultDetailEntry(TestID, ScheduleID, ServiceID);
                frm.ShowDialog();
            }
            else if (dvcell.ToolTipText.ToString() == "Edit")
            {
                TestResultDetailEntry frm = new TestResultDetailEntry(TestID, ScheduleID, ServiceID);
                frm.ShowDialog();
                //TestResultEntry frm = new TestResultEntry(ScheduleID);
                // frm.ShowDialog();
            }
        }

        private void TbxServiceName_Enter(object sender, EventArgs e)
        {
            if(TbxServiceName.Text == "Service Name")
                    TbxServiceName.Text = "";
        }

        private void TbxServiceName_Leave(object sender, EventArgs e)
        {
            if(TbxServiceName.Text == "")
                TbxServiceName.Text = "Service Name";
        }

        private void TbxServiceName_KeyUp(object sender, KeyEventArgs e)
        {
            DataView dtr = new DataView(dt, "ServiceName like '%" + TbxServiceName.Text + "%'", "", DataViewRowState.CurrentRows);
            LoadGridData(dtr.ToTable());
        }

        private void ComServiceType_SelectedIndexChanged(object sender, EventArgs e)
        {
            if(ComServiceType.SelectedIndex != 0)
            {

                DataView d = new DataView(dt, "TypeId = '" + ComServiceType.SelectedValue + "'", "", DataViewRowState.CurrentRows);
                LoadGridData(d.ToTable());
                TbxServiceName.Text = "Service Name";
            }
            else
            {
                LoadGridData(dt);
                TbxServiceName.Text = "Service Name";
            }
        }

        private void btnViewPdf_Click(object sender, EventArgs e)
        {
            if(ComServiceType.SelectedIndex!=0)
            {
                ViewPdfForServiceType();
            }
        }

        private void ViewPdfForServiceType()
        {
            //crs = cmbCourse.SelectedIndex > 0 ? cmbCourseShadow.Items[cmbCourse.SelectedIndex].ToString() : "0";  
            try
            {
                int serviceId = Convert.ToInt32(ComServiceType.SelectedValue);
                DataTable courseDt = new bllReportData().GetTestCatagoryReport(_id, serviceId);



                //dt = new bllTournament().GetListWithFiltering();
                int TotalRec = 0;
                if (courseDt.Rows.Count > 0)
                    TotalRec = courseDt.Rows.Count;
                else
                {
                    TotalRec = 0;
                }

                string localPath = string.Empty;
                var fbd = new FolderBrowserDialog();
                if (fbd.ShowDialog() == DialogResult.OK)
                {
                    localPath = fbd.SelectedPath + "\\BloodChemistry" + DateTime.Today.Date.ToString("dd_MMM_yyyy_") + DateTime.Now.Minute + "_" + DateTime.Now.Second + "_" + DateTime.Now.Millisecond + ".pdf";
                    this.Cursor = Cursors.WaitCursor;
                    Rpt_BloodChemistry rpt = new Rpt_BloodChemistry();
                    rpt.SetDataSource(courseDt);

                    //rpt.SetParameterValue("ClubName", _ClubName);
                    //rpt.SetParameterValue("LogoPath", Application.StartupPath + @"\logo-url.jpg");
                    //rpt.SetParameterValue("ReportName", "Tournament List");
                    //rpt.SetParameterValue("Date", "Date: " + DateTime.Today.ToString("dd-MMM-yyyy"));

                    rpt.ExportToDisk(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, localPath);
                    this.Cursor = Cursors.Default;
                    KryptonMessageBox.Show("Patient Test Report Exported successfully!", "Patient Test Result.", MessageBoxButtons.OK,
                                           MessageBoxIcon.Information);
                    Process.Start(localPath);
                }
            }
            catch (Exception ex)
            {
                KryptonMessageBox.Show(ex.Message);
                this.Cursor = Cursors.Default;
                return;
            }
        }
    }
}

